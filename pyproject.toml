[build-system]
# Build Python requirements, keep Cython in sync with
# "Prerequisites" in User's Guide,
# build jobs in `.github/workflows/*.yml`.
requires = [
    "setuptools >=61.0.0",  # "meson-python",  # and replace ``build-backend`` below
    "wheel",
    "numpy >=2,<3",
    "packaging",
    "py-cpuinfo",
    "Cython >=3.0.10",
    # Included here for seamless wheel builds.
    # Packagers can choose to replace it by externally provided
    # c-blosc2 library and headers
    "blosc2 >=2.7.0",
    "typing-extensions >= 4.4.0",
]
build-backend = "setuptools.build_meta"
# build-backend = "mesonpy"  # and replace ``setuptools`` above


[project]
name = "tables"
dynamic = [ "version" ]
description = "Hierarchical datasets for Python"
# Keep Python versions in sync with
# `classifiers` below,
# `min_python_version` in `setup.py`.
requires-python = ">=3.10"
license = { text = "BSD 3-Clause License" }
keywords = [ "hdf5" ]
authors = [
    { name = "Francesc Alted" },
    { name = "Ivan Vilata" },
    { name = "Antonio Valentino" },
    { name = "Anthony Scopatz" },
    { name = "et al." },
    { email = "pytables@pytables.org" },
]
maintainers = [
    { name = "PyTables maintainers", email = "pytables@pytables.org" },
]
# Keep Python versions in sync with
# `requires_python` above,
# "Prerequisites" in User's Guide,
# `jobs.build.strategy.matrix.python` in `.github/workflows/ci.yml`,
# `jobs.build_wheels.env.CIBW_SKIP` in `.github/workflows/wheels.yml`.
# `jobs.build_wheels_windows.env.CIBW_BUILD` in `.github/workflows/wheels.yml`.
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: Unix",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Database",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
# Runtime Python requirements, keep in sync with
# "Prerequisites" in User's Guide,
# ``requirements.txt``,
# `jobs.build.steps` in `.github/workflows/ubuntu.yml`.
dependencies = [
    "numpy >= 1.20.0",
    "numexpr >= 2.6.2",
    "packaging",
    "py-cpuinfo",
    "blosc2 >= 2.3.0",
    "typing-extensions >= 4.4.0",
]


[project.optional-dependencies]
# Keep in sync with build jobs in `.github/workflows/*.yml`.
doc = [
    "sphinx >= 1.1 , < 6",
    "sphinx_rtd_theme",
    "numpydoc",
    "ipython",
]


[project.readme]
text = """
PyTables is a package for managing hierarchical datasets and
designed to efficiently cope with extremely large amounts of
data. PyTables is built on top of the HDF5 library and the
NumPy package and features an object-oriented interface
that, combined with C-code generated from Cython sources,
makes of it a fast, yet extremely easy to use tool for
interactively save and retrieve large amounts of data.
"""
content-type = "text/x-rst"


[project.urls]
homepage = "http://www.pytables.org"
documentation = "http://www.pytables.org"
repository = "https://github.com/PyTables/PyTables"
changelog = "http://www.pytables.org/release_notes.html"
tracker = "https://github.com/PyTables/PyTables/issues"


[project.scripts]
ptdump = "tables.scripts.ptdump:main"
ptrepack = "tables.scripts.ptrepack:main"
pt2to3 = "tables.scripts.pt2to3:main"
pttree = "tables.scripts.pttree:main"


[tool.setuptools]
platforms = [ "any" ]
zip-safe = false
# include-package-data = true
license-files = [ "LICENSE.txt" ]


[tool.setuptools.dynamic]
version = { attr = "tables._version.__version__" }


[tool.setuptools.packages.find]
exclude = [ "bench" ]
namespaces = false


[tool.setuptools.package-data]
tables = [ "*.dll", "*.so*", "*.dylib" ]
"tables.tests" = [ "*.h5", "*.mat" ]
"tables.nodes.tests" = [ "*.dat", "*.xbm", "*.h5" ]

[tool.cibuildwheel]
skip = "*-musllinux_*"
build = "cp*"
build-verbosity = 3
test-command = "python -m tables.tests.test_all"
environment = {"DISABLE_AVX2"="TRUE", "CFLAGS"="-g0"}
test-skip = "*_aarch64"
# Keep in sync with ``build-system.requires`` above
before-build = "python -m pip install --require-hashes -r .github/workflows/requirements/build-requirements.txt -r requirements.txt"

[tool.cibuildwheel.linux]
# Use Linux images with HDF5 already available (thanks to h5py devs!) --
# cross-compiling HDF5 on aarch64 takes a long time (>30 minutes)
# so better to avoid it.
manylinux-x86_64-image = "ghcr.io/h5py/manylinux2014_x86_64-hdf5"
manylinux-aarch64-image = "ghcr.io/h5py/manylinux2014_aarch64-hdf5"
before-all = [
    "rpm --import https://repo.almalinux.org/almalinux/RPM-GPG-KEY-AlmaLinux",
    # This line is needed until https://github.com/h5py/hdf5-manylinux/issues/12 is fixed
    "sed -i -e 's/mirrorlist/#mirrorlist/g' -e 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*",
    "yum -y install epel-release",
    "yum -y update",
    "yum install -y zlib-devel bzip2-devel lzo-devel blosc-devel",
]

[tool.cibuildwheel.macos]
before-all = "cp -r `pwd`/hdf5_build /tmp/hdf5"
repair-wheel-command = [
    "DYLD_FALLBACK_LIBRARY_PATH=/tmp/hdf5/lib delocate-listdeps {wheel}",
    "DYLD_FALLBACK_LIBRARY_PATH=/tmp/hdf5/lib delocate-wheel --require-archs {delocate_archs} -w {dest_dir} {wheel}",
]

[tool.cibuildwheel.macos.environment]
CC = "/usr/bin/clang"
CXX = "/usr/bin/clang"
HDF5_DIR = "/tmp/hdf5"
LZO_DIR = "/tmp/hdf5"
BZIP2_DIR = "/tmp/hdf5"
LD_LIBRARY_PATH = "/tmp/hdf5/lib:${LD_LIBRARY_PATH}"
PKG_CONFIG_PATH = "/tmp/hdf5/lib/pkgconfig:${PKG_CONFIG_PATH}"

[tool.cibuildwheel.windows]
before-all = [
    "conda create --yes --name=build",
    "conda activate build",
    "conda install --yes blosc bzip2 cython hdf5 lz4 lzo snappy zstd zlib",
]
before-build = [
    "python -m pip install --require-hashes -r requirements.txt",
    "python -m pip install delvewheel",
]
repair-wheel-command = "delvewheel repair -w {dest_dir} {wheel}"

[tool.cibuildwheel.windows.environment]
CONDA_PREFIX = 'C:\Miniconda\\envs\\build'
PATH = '$PATH;C:\Miniconda\envs\build\Library\bin'
PYTABLES_NO_EMBEDDED_LIBS = "true"
DISABLE_AVX2 = "true"
