name: Wheels

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number }}-${{ github.event.ref }}
  cancel-in-progress: true

# Publish when a (published) GitHub Release is created.
on:
  push:
    branches:
      - master
      - tables  # TODO: REMOVE
      - 'releases/**'
      - 'ci/**'
    tags:
      - v*
  pull_request:
    branches:
      - '*'
  release:
    types:
      - published
  # TODO:
  # The scheduled version of this job should really download and install NumPy
  # from scientific-python-nightly-wheels
  schedule:
    - cron:  '12 13 * * 0'

permissions:
  contents: read

jobs:
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: 3.x

      - name: Install APT packages
        if: contains(${{ matrix.os }}, 'ubuntu')
        run: |
          sudo apt update
          # Keep in sync with "Prerequisites" in User's Guide.
          sudo apt install libbz2-dev libhdf5-serial-dev liblzo2-dev
          sudo apt install latexmk texlive-fonts-recommended texlive-latex-recommended texlive-latex-extra texlive-plain-generic

      - name: Install dependencies
        run: |
          # Keep in sync with ``build-system.requires`` in ``pyproject.toml``.
          python -m pip install --require-hashes -r ./.github/workflows/requirements/build-requirements.txt
          python -m pip install --require-hashes -r requirements.txt
          # Keep in sync with ``project.optional-dependencies.doc`` in ``pyproject.toml``.
          python -m pip install --require-hashes -r ./.github/workflows/requirements/optional-requirements.txt

      - name: Build dist (sdist and docs)
        run: make PYTHON=python dist

      - uses: actions/upload-artifact@v4
        with:
          path: dist/*
          name: dist

  build_wheels:
    name: Build ${{ matrix.os }} wheels for ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    env:
      # Keep in sync with "Prerequisites" in User's Guide.
      HDF5_VERSION: 1.14.3  # H5Dchunk_iter needs at least 1.14.1
      MACOSX_DEPLOYMENT_TARGET: "10.9"
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
          - os: ubuntu-latest
            arch: aarch64
          - os: macos-13
            arch: x86_64
          - os: macos-14
            arch: arm64
          - os: windows-latest
            arch: AMD64

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: 3.x

      - uses: docker/setup-qemu-action@v3
        if: runner.os == 'Linux' && matrix.arch != 'x64_64'
        name: Set up QEMU

      - uses: actions/cache@v4
        id: deps-cache
        with:
          path: hdf5_build
          key: ${{ runner.os }}-${{ matrix.arch }}-deps-cache-${{ hashFiles('**/get_hdf5.sh') }}-${{ env.HDF5_VERSION }}-${{ hashFiles('**/wheels.yml') }}

      - name: Build dependencies
        env:
          CFLAGS: -g0
          CIBW_ARCHS: ${{ matrix.arch }}
          HDF5_DIR: ${{ github.workspace }}/hdf5_build
        run: |
          ./ci/github/get_hdf5.sh
        if: runner.os == 'macOS' && steps.deps-cache.outputs.cache-hit != 'true'

      - name: Install Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          channels: defaults,conda-forge
          use-only-tar-bz2: true
        if: runner.os == 'Windows'

      - name: Install cibuildwheel
        run: |
          python -m pip install --require-hashes -r ./.github/workflows/requirements/wheels-requirements.txt

      - name: Build wheels for ${{ matrix.os }} (${{ matrix.arch }})
        run: |
          python -m cibuildwheel --output-dir wheelhouse --archs ${{ matrix.arch }}

      - name: Copy requirements.txt
        run: |
          cp requirements.txt ./wheelhouse/

      - uses: actions/upload-artifact@v4
        with:
          path: |
            ./wheelhouse/*.whl
            ./wheelhouse/*.txt
          name: cibw-wheels-${{ matrix.os }}-${{ matrix.arch }}-${{ strategy.job-index }}

  twine_check:
    needs: [ build_sdist, build_wheels ]
    name: Twine check
    runs-on: 'ubuntu-latest'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - uses: actions/download-artifact@v4
        with:
          pattern: '*'
          merge-multiple: true

      - run: ls -alR ./wheelhouse/
      - run: rm ./wheelhouse/*.txt  # don't upload these

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install twine
        run: |
          python -m pip install --require-hashes -r ./.github/workflows/requirements/wheels-requirements.txt

      - name: Check sdist and wheels
        run: |
          python -m twine check wheelhouse/*

      - name: Upload wheel
        uses: scientific-python/upload-nightly-action@b67d7fcc0396e1128a474d1ab2b48aa94680f9fc # 0.5.0
        if: github.repository == 'PyTables/PyTables' && github.event_name == 'schedule'
        with:
          artifacts_path: wheelhouse/artifact
          anaconda_nightly_upload_token: ${{secrets.ANACONDA_ORG_UPLOAD_TOKEN}}
