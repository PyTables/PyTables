name: Wheels

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number }}-${{ github.event.ref }}
  cancel-in-progress: true

# Publish when a (published) GitHub Release is created.
on:
  push:
    branches:
      - master
      - 'releases/**'
      - 'ci/**'
    tags:
      - v*
  pull_request:
    branches:
      - master
      - 'releases/**'
      - 'ci/**'
  release:
    types:
      - published
  # TODO:
  # The scheduled version of this job should really download and install NumPy
  # from scientific-python-nightly-wheels
  schedule:
    - cron:  '12 13 * * 0'
  # Allow manual triggering of the workflow (which will release the wheels to nightly)
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.1.7
        with:
          fetch-depth: 0
          submodules: true

      - uses: actions/setup-python@2e3e4b15a884dc73a63f962bff250a855150a234 # v5.1.1
        name: Install Python
        with:
          python-version: 3.x

      - name: Install APT packages
        if: contains(${{ matrix.os }}, 'ubuntu')
        run: |
          sudo apt update
          # Keep in sync with "Prerequisites" in User's Guide.
          sudo apt install libbz2-dev libhdf5-serial-dev
          sudo apt install latexmk texlive-fonts-recommended texlive-latex-recommended texlive-latex-extra texlive-plain-generic

      - name: Install dependencies
        run: |
          # Keep in sync with ``build-system.requires`` in ``pyproject.toml``.
          python -m pip install --require-hashes -r .github/workflows/requirements/build-requirements.txt
          python -m pip install --require-hashes -r requirements.txt
          python -m pip install --require-hashes -r requirements-docs.txt

      - name: Build dist (sdist and docs)
        run: make PYTHON=python dist

      - uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        with:
          path: dist/*
          name: dist

  build_wheels:
    name: Build ${{ matrix.os }} ${{ matrix.arch }} ${{ matrix.build }} wheels
    runs-on: ${{ matrix.os }}
    env:
      # Keep in sync with "Prerequisites" in User's Guide.
      HDF5_VERSION: 1.14.6  # H5Dchunk_iter needs at least 1.14.1
      MACOSX_DEPLOYMENT_TARGET: "10.9"
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            build: 'cp*'
          # - os: macos-15-intel
          #   arch: x86_64
          #   build: 'cp*'
          - os: macos-latest
            arch: arm64
            build: 'cp*'
          - os: windows-latest
            arch: AMD64
            build: 'cp*'
          - os: ubuntu-24.04-arm
            arch: aarch64
            build: 'cp*'

    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.1.7
        with:
          fetch-depth: 0
          submodules: true

      - uses: actions/setup-python@2e3e4b15a884dc73a63f962bff250a855150a234 # v5.1.1
        name: Install Python on Unix
        with:
          python-version: '3.12'
        if: runner.os != 'Windows'

      - name: Install Python and dependencies on Windows
        uses: mamba-org/setup-micromamba@add3a49764cedee8ee24e82dfde87f5bc2914462 # v2.0.7
        with:
          environment-name: build
          create-args: >
            python=3.12 blosc c-blosc2 bzip2 hdf5 lz4 snappy zstd zlib pkgconfig
          init-shell: bash powershell
        if: runner.os == 'Windows'

      - uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        id: deps-cache
        with:
          path: hdf5_build
          # Instead of a hashFiles('**/wheels.yml') appended here, just use a counter.
          # It allows us to modify this file without having to constantly rebuild HDF5
          # (which takes almost an hour on Linux emulated aarch64).
          key: ${{ runner.os }}-${{ matrix.arch }}-deps-cache-${{ hashFiles('**/get_hdf5.sh') }}-${{ env.HDF5_VERSION }}-1
        if: runner.os != 'Windows'

      - name: Build dependencies
        env:
          CFLAGS: -g0
          HDF5_DIR: ${{ github.workspace }}/hdf5_build
          MACOSX_DEPLOYMENT_TARGET: "10.9"
        if: runner.os != 'Windows' && steps.deps-cache.outputs.cache-hit != 'true'
        run: |
          mkdir hdf5_build
          if [[ "${{ runner.os }}" = 'Linux' ]]; then
            docker run --rm -e HDF5_DIR=/io/hdf5_build -e CFLAGS="$CFLAGS" -e HDF5_VERSION="$HDF5_VERSION" -v `pwd`:/io:rw quay.io/pypa/manylinux2014_${{ matrix.arch }} /io/ci/github/get_hdf5.sh
          else
            HDF5_DIR=`pwd`/hdf5_build ci/github/get_hdf5.sh
          fi

      - name: Install cibuildwheel
        run: |
          python -m pip install --require-hashes -r ./.github/workflows/requirements/wheels-requirements.txt

      - name: Build ${{ matrix.build }} wheels
        run: |
          python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: '${{ matrix.build }}'
          CIBW_ARCHS: '${{ matrix.arch }}'

      - name: Copy requirements.txt
        run: |
          cp requirements.txt ./wheelhouse/

      - uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        with:
          path: |
            ./wheelhouse/*.whl
            ./wheelhouse/*.txt
          name: cibw-wheels-${{ matrix.os }}-${{ matrix.arch }}-${{ strategy.job-index }}

  twine_check:
    needs: [ build_sdist, build_wheels ]
    name: Twine check
    runs-on: 'ubuntu-latest'

    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.1.7
        with:
          fetch-depth: 0
          submodules: true

      - uses: actions/download-artifact@018cc2cf5baa6db3ef3c5f8a56943fffe632ef53 # v4.1.8
        with:
          pattern: '*'
          merge-multiple: true
          path: wheelhouse

      - name: List downloaded artifacts
        run: ls -alR ./wheelhouse/

      - name: Install Python
        uses: actions/setup-python@2e3e4b15a884dc73a63f962bff250a855150a234 # v5.1.1
        with:
          python-version: '3.x'

      - name: Install twine
        run: |
          python -m pip install --require-hashes -r ./.github/workflows/requirements/wheels-requirements.txt

      - name: Check sdist and wheels
        run: |
          python -m twine check *.whl tables-*.tar.gz
        working-directory: wheelhouse

      - name: Upload wheel
        uses: scientific-python/upload-nightly-action@b36e8c0c10dbcfd2e05bf95f17ef8c14fd708dbf # 0.6.2
        if: github.repository == 'PyTables/PyTables' && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
        with:
          artifacts_path: wheelhouse
          anaconda_nightly_upload_token: ${{secrets.ANACONDA_ORG_UPLOAD_TOKEN}}
