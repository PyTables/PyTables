name: Wheels

# Publish when a (published) GitHub Release is created.
on:
  push:
    branches:
      - master
      - 'releases/**'
      - 'ci/**'
    tags:
      - v*
  release:
    types:
      - published

permissions:
  contents: read

jobs:
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: 3.x

      - name: Install APT packages
        if: contains(${{ matrix.os }}, 'ubuntu')
        run: |
          sudo apt update
          # Keep in sync with "Prerequisites" in User's Guide.
          sudo apt install libbz2-dev libhdf5-serial-dev liblzo2-dev
          sudo apt install latexmk texlive-fonts-recommended texlive-latex-recommended texlive-latex-extra texlive-plain-generic

      - name: Install dependencies
        run: |
          # Keep in sync with ``build-system.requires`` in ``pyproject.toml``.
          python -m pip install --upgrade setuptools pip wheel build cython
          python -m pip install -r requirements.txt
          # Keep in sync with ``project.optional-dependencies.doc`` in ``pyproject.toml``.
          python -m pip install 'sphinx>=1.1,<6' sphinx_rtd_theme numpydoc ipython

      - name: Build sdist
        run: make PYTHON=python dist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*

  build_wheels:
    name: Build ${{ matrix.os }} wheels for ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    env:
      # Keep in sync with "Prerequisites" in User's Guide.
      HDF5_VERSION: 1.14.2  # H5Dchunk_iter needs at least 1.14.1
      MACOSX_DEPLOYMENT_TARGET: "10.9"
      # Keep Python in sync with ``project.classifiers`` in ``pyproject.toml``.
      # Skip 3.6, 3.7 and 3.8 wheels
      CIBW_SKIP: "*-musllinux_* cp36-* cp37-* cp38-* "
      CIBW_BUILD: "cp*"
    strategy:
      matrix:
        # Please note that some architectures are not tested,
        # see "Build wheels" and ``CIBW_TEST_SKIP`` below.
        os: [ 'ubuntu-latest' ]
        arch: [ 'x86_64',  'aarch64' ]
        include:
          - os: macos-latest
            arch: x86_64
          # Still having issues here: https://github.com/PyTables/PyTables/pull/979
          # - os: macos-latest
          #   arch: arm64

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: 3.x

      - uses: docker/setup-qemu-action@v2
        if: runner.os == 'Linux'
        name: Set up QEMU

      - uses: actions/cache@v3
        id: deps-cache
        with:
          path: hdf5_build
          key: ${{ runner.os }}-${{ matrix.arch }}-deps-cache-${{ hashFiles('**/get_hdf5.sh') }}-${{ env.HDF5_VERSION }}-${{ hashFiles('**/wheels.yml') }}

      - name: Build dependencies
        env:
          CFLAGS: -g0
          CIBW_ARCHS: ${{ matrix.arch }}
        if: ${{ steps.deps-cache.outputs.cache-hit != 'true' }}
        run: |
          mkdir hdf5_build
          if [[ ${{ runner.os }} = 'Linux' ]]; then
            docker run --rm -e HDF5_DIR=/io/hdf5_build -e CFLAGS=-g0 -e HDF5_VERSION=${{ env.HDF5_VERSION }} -v `pwd`:/io:rw quay.io/pypa/manylinux2014_${{ matrix.arch }} /io/ci/github/get_hdf5.sh
          else
            HDF5_DIR=`pwd`/hdf5_build ci/github/get_hdf5.sh
          fi

      - name: Install cibuildwheel
        run: |
          python -m pip install --upgrade cibuildwheel

      - name: Build wheels
        run: |
          python -m cibuildwheel --output-dir wheelhouse
        env:
          CFLAGS: -g0
          CIBW_BUILD_VERBOSITY_MACOS: 3
          CIBW_ARCHS: ${{ matrix.arch }}
          # Keep in sync with ``build-system.requires`` in ``pyproject.toml``.
          CIBW_BEFORE_BUILD: >
            python -m pip install -U setuptools pip wheel cython &&
            python -m pip install -r requirements.txt
          CIBW_ENVIRONMENT: DISABLE_AVX2='TRUE' CFLAGS=-g0 HDF5_DIR=/tmp/hdf5 LD_LIBRARY_PATH="/tmp/hdf5/lib:${LD_LIBRARY_PATH}" PKG_CONFIG_PATH="/tmp/hdf5/lib/pkgconfig:${PKG_CONFIG_PATH}"
          CIBW_ENVIRONMENT_MACOS: CC=/usr/bin/clang CXX=/usr/bin/clang HDF5_DIR=/tmp/hdf5 LZO_DIR=/tmp/hdf5 BZIP2_DIR=/tmp/hdf5 LD_LIBRARY_PATH="/tmp/hdf5/lib:${LD_LIBRARY_PATH}" PKG_CONFIG_PATH="/tmp/hdf5/lib/pkgconfig:${PKG_CONFIG_PATH}"
          CIBW_BEFORE_ALL_MACOS: cp -r `pwd`/hdf5_build /tmp/hdf5
          # Keep in sync with "Prerequisites" in User's Guide.
          CIBW_BEFORE_ALL_LINUX: >
            cp -r `pwd`/hdf5_build /tmp/hdf5 &&
            yum -y update &&
            yum install -y zlib-devel bzip2-devel lzo-devel
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: >
            DYLD_FALLBACK_LIBRARY_PATH=/tmp/hdf5/lib delocate-listdeps {wheel} &&
            DYLD_FALLBACK_LIBRARY_PATH=/tmp/hdf5/lib delocate-wheel --require-archs {delocate_archs} -w {dest_dir} {wheel}
          CIBW_TEST_COMMAND: "python -m tables.tests.test_all"
          CIBW_TEST_SKIP: "*_aarch64 *_arm64"

      - name: Copy requirements.txt
        run: |
          cp requirements.txt ./wheelhouse/

      - uses: actions/upload-artifact@v3
        with:
          path: |
            ./wheelhouse/*.whl
            ./wheelhouse/*.txt

  build_wheels_windows:
    name: Build wheels for ${{matrix.arch}} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        arch: [win_amd64]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: 3.x

      - name: Install Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          channels: defaults,conda-forge
          use-only-tar-bz2: true

      - name: Install cibuildwheel
        run: |
          python -m pip install --upgrade cibuildwheel

      - name: Build wheels for Windows (${{ matrix.arch }})
        run: cibuildwheel --output-dir wheelhouse
        env:
          # Keep Python in sync with ``project.classifiers`` in ``pyproject.toml``.
          CIBW_BUILD: "cp39-${{ matrix.arch }} cp310-${{ matrix.arch }} cp311-${{ matrix.arch }} cp312-${{ matrix.arch }}"
          # Keep in sync with "Prerequisites" in User's Guide.
          CIBW_BEFORE_ALL_WINDOWS: >
            conda create --yes --name=build &&
            conda activate build &&
            conda config --env --set subdir ${{ matrix.arch == 'win32' && 'win-32' || 'win-64' }} &&
            conda install --yes blosc bzip2 cython hdf5 lz4 lzo snappy zstd zlib
          CIBW_ENVIRONMENT_WINDOWS: 'CONDA_PREFIX="C:\\Miniconda\\envs\\build" PATH="$PATH;C:\\Miniconda\\envs\\build\\Library\\bin"'
          CIBW_ENVIRONMENT: "PYTABLES_NO_EMBEDDED_LIBS=true DISABLE_AVX2=true"
          CIBW_BEFORE_BUILD: "python -m pip install -r requirements.txt delvewheel"
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair -w {dest_dir} {wheel}"
          CIBW_TEST_COMMAND: "python -m tables.tests.test_all"

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  twine_check:
    needs: [ build_sdist, build_wheels, build_wheels_windows ]
    name: Twine check
    runs-on: 'ubuntu-latest'

    steps:
      - uses: actions/download-artifact@v3
        with:
          path: ./wheelhouse/

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install twine
        run: |
          python -m pip install twine

      - name: Check sdist and wheels
        run: |
          python -m twine check wheelhouse/artifact/tables*.tar.gz wheelhouse/artifact/*.whl
