name: CI

on: [push, pull_request]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: [ '3.6', '3.7', '3.8', '3.9' ]

        # FIXME: Unfortunately, building for Python 3.9 on Windows fails with "fatal error LNK1181: cannot open input file 'hdf5.lib'"
        # https://github.community/t/how-to-conditionally-include-exclude-items-in-matrix-eg-based-on-branch/16853/6
        exclude:
          - os: windows-latest
            python-version: '3.9'
    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python-version }}

    name: ${{ matrix.os }} - Python ${{ matrix.python-version }}
    steps:

    - name: Acquire sources
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Debian packages
      if: contains(matrix.os, 'ubuntu')
      run: |
        sudo apt install libblosc-dev libbz2-dev libhdf5-dev liblz4-dev liblzo2-dev libsnappy-dev libzstd-dev zlib1g-dev

    - name: Install Homebrew packages
      if: contains(matrix.os, 'macos')
      env:
        # Set brew cleanup period to 10 years, essentially disabling cleanup.
        HOMEBREW_CLEANUP_PERIODIC_FULL_DAYS: 3650
      run: |
        brew install c-blosc bzip2 hdf5 lz4 lzo snappy zstd zlib

    - name: Cache dependencies
      uses: actions/cache@v2
      env:
        # Increase this value to reset cache if etc/example-environment.yml has not changed
        CACHE_NUMBER: 0
      with:
        path: |
          ~/.cache/pip
          ~/conda_pkgs_dir
        key:
          ${{ runner.os }}-pythonpkg-${{ env.CACHE_NUMBER }}-${{ hashFiles('requirements.txt', 'requirements-docs.txt') }}

    - name: Install dependencies on Linux and macOS
      if: contains(matrix.os, 'windows') == false
      run: pip install --requirement=requirements.txt --requirement=requirements-dev.txt

    - name: Install Miniconda on Windows
      if: contains(matrix.os, 'windows')

      uses: conda-incubator/setup-miniconda@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies on Windows
      if: contains(matrix.os, 'windows')
      run: |

        # Install packages.
        conda create --yes python=${{ matrix.python-version }}
        conda install --yes blosc bzip2 hdf5 lz4 lzo snappy zstd zlib

        # Install build dependencies.
        conda install --yes --file=requirements.txt --file=requirements-dev.txt

    - name: Run build and install in development mode
      run: python setup.py develop

    - name: Run tests
      run: |
        cd .. && python -m tables.tests.test_all
        pt2to3 -h
        ptrepack -h
        ptdump -h
        pttree -h

    - name: Build documentation
      env:
        SPHINXOPTS: -j auto
      run: |
        pip install --requirement=requirements-docs.txt
        make --directory=doc html
